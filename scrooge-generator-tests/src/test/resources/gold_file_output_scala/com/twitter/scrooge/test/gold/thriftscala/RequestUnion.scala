/**
 * Generated by Scrooge
 *   version: ?
 *   rev: ?
 *   built at: ?
 *   source file: gold.thrift
 */
package com.twitter.scrooge.test.gold.thriftscala

import com.twitter.scrooge.{
  TFieldBlob,
  ThriftStructFieldInfo,
  ThriftStructMetaData,
  ThriftUnion,
  ThriftUnionFieldInfo,
  ValidatingThriftStruct,
  ValidatingThriftStructCodec3}
import org.apache.thrift.protocol._
import scala.collection.immutable.{Map => immutable$Map}

@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
sealed trait RequestUnion
  extends ThriftUnion
  with ValidatingThriftStruct[RequestUnion] {

  def _codec: ValidatingThriftStructCodec3[RequestUnion] = RequestUnion
}

object RequestUnionAliases {

  type IdAlias = Int

  def withoutPassthroughFields_Id(obj: RequestUnion.Id): RequestUnion.Id = {
    RequestUnion.Id(obj.id)
  }

  val IdKeyTypeManifest: _root_.scala.Option[Manifest[_]] = _root_.scala.None

  val IdValueTypeManifest: _root_.scala.Option[Manifest[_]] = _root_.scala.None

  type NameAlias = String

  def withoutPassthroughFields_Name(obj: RequestUnion.Name): RequestUnion.Name = {
    RequestUnion.Name(obj.name)
  }

  val NameKeyTypeManifest: _root_.scala.Option[Manifest[_]] = _root_.scala.None

  val NameValueTypeManifest: _root_.scala.Option[Manifest[_]] = _root_.scala.None
}


@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
object RequestUnion extends ValidatingThriftStructCodec3[RequestUnion] {
  val Union: TStruct = new TStruct("RequestUnion")
  val IdField: TField = new TField("id", TType.I32, 1)
  val IdFieldManifest: Manifest[Id] = manifest[Id]
  val NameField: TField = new TField("name", TType.STRING, 2)
  val NameFieldManifest: Manifest[Name] = manifest[Name]

  val structAnnotations: immutable$Map[java.lang.String, java.lang.String] =
    immutable$Map.empty[java.lang.String, java.lang.String]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftUnionFieldInfo[_ <: RequestUnion, _]] = scala.List(
    new ThriftUnionFieldInfo[Id, RequestUnionAliases.IdAlias](
      Id.fieldInfo,
      Id.unapply
    ),
    new ThriftUnionFieldInfo[Name, RequestUnionAliases.NameAlias](
      Name.fieldInfo,
      Name.unapply
    )
  )

  override lazy val metaData = ThriftStructMetaData(
    this,
    Nil,
    Nil,
    fieldInfos.asInstanceOf[Seq[ThriftUnionFieldInfo[_root_.com.twitter.scrooge.ThriftUnion, _]]],
    structAnnotations)

  override def encode(_item: RequestUnion, _oprot: TProtocol): Unit =
    _item.write(_oprot)

  override def decode(_iprot: TProtocol): RequestUnion = {
    var _result: RequestUnion = null
    _iprot.readStructBegin()
    val _field = _iprot.readFieldBegin()
    val _fieldType = _field.`type`
    _field.id match {
      case 1 => // id
        if (_fieldType == TType.I32) {
          _result = RequestUnion.Id({
            _iprot.readI32()
          })
        } else TProtocolUtil.skip(_iprot, _fieldType)
      case 2 => // name
        if (_fieldType == TType.STRING) {
          _result = RequestUnion.Name({
            _iprot.readString()
          })
        } else TProtocolUtil.skip(_iprot, _fieldType)
      case _ =>
        if (_fieldType != TType.STOP) {
          _result = UnknownUnionField(TFieldBlob.read(_field, _iprot))
        } else {
          TProtocolUtil.skip(_iprot, _fieldType)
        }
    }
    _root_.com.twitter.scrooge.internal.TProtocols.finishReadingUnion(_iprot, _fieldType, _result)

    _result
  }

  def apply(_iprot: TProtocol): RequestUnion = decode(_iprot)

  import RequestUnionAliases._

  def withoutPassthroughFields(struct: RequestUnion): RequestUnion = {
    if (struct.isInstanceOf[Id]) withoutPassthroughFields_Id(struct.asInstanceOf[Id])
    else if (struct.isInstanceOf[Name]) withoutPassthroughFields_Name(struct.asInstanceOf[Name])
    else struct //This is an UnknownUnionField, by definition passthrough
  }

  object Id extends (IdAlias => Id) {
    def withoutPassthroughFields(obj: Id): Id =
      withoutPassthroughFields_Id(obj)

    val fieldInfo: ThriftStructFieldInfo =
      new ThriftStructFieldInfo(
        IdField,
        false,
        false,
        manifest[IdAlias],
        IdKeyTypeManifest,
        IdValueTypeManifest,
        immutable$Map.empty[java.lang.String, java.lang.String],
        immutable$Map(
          ("validation.positiveOrZero", "")
        ),
        _root_.scala.None,
        _root_.scala.Option(0)
      )
  }

  case class Id(
      id: IdAlias)
    extends RequestUnion {

    protected type ContainedType = IdAlias

    def containedValue(): ContainedType = id

    def unionStructFieldInfo: _root_.scala.Option[ThriftStructFieldInfo] =
      _root_.scala.Some(Id.fieldInfo)

    def writeFieldValue(_oprot: TProtocol): Unit = {
      val _value = id
      _oprot.writeI32(_value)
    }

    override def write(_oprot: TProtocol): Unit = {
      _oprot.writeStructBegin(Union)
        val _value = id
        _oprot.writeFieldBegin(IdField)
        _oprot.writeI32(_value)
        _oprot.writeFieldEnd()
      _oprot.writeFieldStop()
      _oprot.writeStructEnd()
    }
  }

  object Name extends (NameAlias => Name) {
    def withoutPassthroughFields(obj: Name): Name =
      withoutPassthroughFields_Name(obj)

    val fieldInfo: ThriftStructFieldInfo =
      new ThriftStructFieldInfo(
        NameField,
        false,
        false,
        manifest[NameAlias],
        NameKeyTypeManifest,
        NameValueTypeManifest,
        immutable$Map.empty[java.lang.String, java.lang.String],
        immutable$Map(
          ("validation.notEmpty", "")
        ),
        _root_.scala.None,
        _root_.scala.Option("empty")
      )
  }

  case class Name(
      name: NameAlias)
    extends RequestUnion {

    protected type ContainedType = NameAlias

    def containedValue(): ContainedType = name

    def unionStructFieldInfo: _root_.scala.Option[ThriftStructFieldInfo] =
      _root_.scala.Some(Name.fieldInfo)

    def writeFieldValue(_oprot: TProtocol): Unit = {
      val _value = name
      _oprot.writeString(_value)
    }

    override def write(_oprot: TProtocol): Unit = {
      if (name eq null)
        throw new TProtocolException("Cannot write a TUnion with no set value!")
      _oprot.writeStructBegin(Union)
      if (name ne null) {
        val _value = name
        _oprot.writeFieldBegin(NameField)
        _oprot.writeString(_value)
        _oprot.writeFieldEnd()
      }
      _oprot.writeFieldStop()
      _oprot.writeStructEnd()
    }
  }

  case class UnknownUnionField private[RequestUnion](
      field: TFieldBlob)
    extends RequestUnion {

    protected type ContainedType = Unit

    def containedValue(): ContainedType = ()

    def unionStructFieldInfo: _root_.scala.Option[ThriftStructFieldInfo] = _root_.scala.None

    override def write(_oprot: TProtocol): Unit = {
      _oprot.writeStructBegin(Union)
      field.write(_oprot)
      _oprot.writeFieldStop()
      _oprot.writeStructEnd()
    }
  }

  lazy val unsafeEmpty: RequestUnion = Id(0)

 /**
  * Checks that the struct is a valid as a new instance. If there are any missing required or
  * construction required fields, return a non-empty list.
  */
  override def validateNewInstance(
    item: RequestUnion
  ): scala.Seq[com.twitter.scrooge.validation.Issue] = {
    validateField(item.containedValue())
  }

  /**
   * Validate that all validation annotations on the struct meet the criteria defined in the
   * corresponding [[com.twitter.scrooge.thrift_validation.ThriftConstraintValidator]].
   */
  override def validateInstanceValue(item: RequestUnion): Set[com.twitter.scrooge.thrift_validation.ThriftValidationViolation] =
    item.unionStructFieldInfo match {
      case _root_.scala.Some(fieldInfo) =>
        validateFieldValue(fieldInfo.tfield.name, item.containedValue(), fieldInfo.fieldAnnotations, scala.None)
      case _ =>
        Set.empty
    }
}