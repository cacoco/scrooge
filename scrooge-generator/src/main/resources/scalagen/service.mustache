package {{package}}

import com.twitter.scrooge._
{{#withFinagle}}
import com.twitter.finagle.{
  service => ctfs,
  Filter => finagle$Filter,
  Service => finagle$Service,
  thrift => _{{#hasThriftFunctions}},
  _{{/hasThriftFunctions}}
}
import com.twitter.finagle.stats.{Counter, StatsReceiver}
import com.twitter.finagle.thrift.{
  Protocols,
  RichClientParam,
  RichServerParam,
  ServerToReqRep,
  ThriftClientRequest{{#withFinagle}}{{^parent}}{{#generateServiceIface}},
  ToThriftService{{/generateServiceIface}}{{/parent}}{{/withFinagle}}
}
import com.twitter.util.{Future, Return, Throw, Throwables}
import com.twitter.io.Buf
{{/withFinagle}}
import org.apache.thrift.protocol._
{{#withFinagle}}
import org.apache.thrift.TApplicationException
{{/withFinagle}}
{{^public}}
{{#hasThriftFunctions}}
import scala.collection.mutable.Builder
{{/hasThriftFunctions}}
{{/public}}
import scala.collection.immutable.{Map => immutable$Map, Set => immutable$Set}
import scala.language.higherKinds
import scala.reflect.{ClassTag, classTag}

{{docstring}}
@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
object {{ServiceName}} {{#withFinagle}}extends _root_.com.twitter.finagle.thrift.GeneratedThriftService {{/withFinagle}}{ self =>

{{#annotations}}
  val annotations: immutable$Map[String, String] = immutable$Map(
{{#pairs}}
    ("{{key}}", "{{value}}")
{{/pairs|,}}
  )
{{/annotations}}
{{^annotations}}
  val annotations: immutable$Map[String, String] = immutable$Map.empty
{{/annotations}}

  val methods: immutable$Set[ThriftMethod] = immutable$Set(
{{#inheritedFunctions}}
    {{ParentServiceName}}.{{funcObjectName}}
{{/inheritedFunctions|,}}
  )

{{#withFinagle}}
{{#generateServiceIface}}
  trait ServicePerEndpoint
    extends {{#parent}}{{parent}}.ServicePerEndpoint{{/parent}}{{^parent}}ToThriftService{{/parent}}
    with _root_.com.twitter.finagle.thrift.service.Filterable[ServicePerEndpoint] {
{{#ownFunctions}}
    def {{dedupedFuncName}} : _root_.com.twitter.finagle.Service[self.{{funcObjectName}}.Args, self.{{funcObjectName}}.SuccessType]
{{/ownFunctions}}

{{#ownFunctions}}
    def with{{withFuncName}}({{dedupedFuncName}} : _root_.com.twitter.finagle.Service[{{ParentServiceName}}.{{funcObjectName}}.Args, {{ParentServiceName}}.{{funcObjectName}}.SuccessType]): ServicePerEndpoint = this

{{/ownFunctions}}
{{#inheritedParentFunctions}}
    {{#parent}}override {{/parent}}def with{{withFuncName}}({{dedupedFuncName}} : _root_.com.twitter.finagle.Service[{{ParentServiceName}}.{{funcObjectName}}.Args, {{ParentServiceName}}.{{funcObjectName}}.SuccessType]): ServicePerEndpoint = this

{{/inheritedParentFunctions}}
    /**
     * Prepends the given type-agnostic `Filter` to all of the `Services`
     * and returns a copy of the `ServicePerEndpoint` now including the filter.
     */
    {{#parent}}override {{/parent}}def filtered(filter: _root_.com.twitter.finagle.Filter.TypeAgnostic): ServicePerEndpoint =
      ServicePerEndpoint.apply({{#inheritedFunctions}}{{dedupedFuncName}}{{/inheritedFunctions|, }}).filtered(filter)

    /**
     * Converts the `ServicePerEndpoint` to a `GeneratedThriftService`.
     * @see _root_.com.twitter.scrooge.ToThriftService
     */
    {{#parent}}override {{/parent}}def toThriftService: _root_.com.twitter.finagle.thrift.ThriftService = MethodPerEndpoint(this)

{{#withAsClosable}}
    /**
     * Used to close the underlying `Service`.
     * Not a user-defined API.
     */
    {{#parent}}override {{/parent}}def asClosable: _root_.com.twitter.util.Closable = _root_.com.twitter.util.Closable.nop
{{/withAsClosable}}
  }

  trait ReqRepServicePerEndpoint
    extends {{#parent}}{{parent}}.ReqRepServicePerEndpoint{{/parent}}{{^parent}}ToThriftService{{/parent}}
    with _root_.com.twitter.finagle.thrift.service.Filterable[ReqRepServicePerEndpoint] {
{{#ownFunctions}}
    def {{dedupedFuncName}} : _root_.com.twitter.finagle.Service[com.twitter.scrooge.Request[self.{{funcObjectName}}.Args], _root_.com.twitter.scrooge.Response[self.{{funcObjectName}}.SuccessType]]
{{/ownFunctions}}

{{#ownFunctions}}
    def with{{withFuncName}}({{dedupedFuncName}} : _root_.com.twitter.finagle.Service[com.twitter.scrooge.Request[{{ParentServiceName}}.{{funcObjectName}}.Args], _root_.com.twitter.scrooge.Response[{{ParentServiceName}}.{{funcObjectName}}.SuccessType]]): ReqRepServicePerEndpoint = this

{{/ownFunctions}}
{{#inheritedParentFunctions}}
    {{#parent}}override {{/parent}}def with{{withFuncName}}({{dedupedFuncName}} : _root_.com.twitter.finagle.Service[com.twitter.scrooge.Request[{{ParentServiceName}}.{{funcObjectName}}.Args], _root_.com.twitter.scrooge.Response[{{ParentServiceName}}.{{funcObjectName}}.SuccessType]]): ReqRepServicePerEndpoint = this

{{/inheritedParentFunctions}}
    /**
     * Prepends the given type-agnostic `Filter` to all of the `Services`
     * and returns a copy of the `ServicePerEndpoint` now including the filter.
     */
    {{#parent}}override {{/parent}}def filtered(filter: com.twitter.finagle.Filter.TypeAgnostic): ReqRepServicePerEndpoint =
      ReqRepServicePerEndpoint.apply({{#inheritedFunctions}}{{dedupedFuncName}}{{/inheritedFunctions|, }}).filtered(filter)

    /**
     * Converts the `ServicePerEndpoint` to a `GeneratedThriftService`.
     * @see _root_.com.twitter.scrooge.ToThriftService
     */
    {{#parent}}override {{/parent}}def toThriftService: _root_.com.twitter.finagle.thrift.ThriftService = ReqRepMethodPerEndpoint(this)

{{#withAsClosable}}
    /**
     * Used to close the underlying `Service`.
     * Not a user-defined API.
     */
    {{#parent}}override {{/parent}}def asClosable: _root_.com.twitter.util.Closable = _root_.com.twitter.util.Closable.nop
{{/withAsClosable}}
  }

  @deprecated("Use ServicePerEndpoint", "2017-11-07")
  trait BaseServiceIface extends {{#parent}}{{parent}}.BaseServiceIface{{/parent}}{{^parent}}ToThriftService{{/parent}} {
{{#ownFunctions}}
    def {{dedupedFuncName}} : com.twitter.finagle.Service[self.{{funcObjectName}}.Args, self.{{funcObjectName}}.SuccessType]
{{/ownFunctions}}

    {{#parent}}override {{/parent}}def toThriftService: _root_.com.twitter.finagle.thrift.ThriftService = new MethodIface(this)
  }

  object ServicePerEndpoint {

    def apply(
{{#inheritedFunctions}}
      {{dedupedFuncName}} : _root_.com.twitter.finagle.Service[{{ParentServiceName}}.{{funcObjectName}}.Args, {{ParentServiceName}}.{{funcObjectName}}.SuccessType]
{{/inheritedFunctions|,}}
    ): ServicePerEndpoint = new ServicePerEndpointImpl({{#inheritedFunctions}}{{dedupedFuncName}}{{/inheritedFunctions|, }})

    private final class ServicePerEndpointImpl(
{{#inheritedFunctions}}
      override val {{dedupedFuncName}} : _root_.com.twitter.finagle.Service[{{ParentServiceName}}.{{funcObjectName}}.Args, {{ParentServiceName}}.{{funcObjectName}}.SuccessType]
{{/inheritedFunctions|,}}
    ) extends ServicePerEndpoint {

{{#inheritedFunctions}}
      override def with{{withFuncName}}(
        {{dedupedFuncName}} : _root_.com.twitter.finagle.Service[{{ParentServiceName}}.{{funcObjectName}}.Args, {{ParentServiceName}}.{{funcObjectName}}.SuccessType]
      ): ServicePerEndpoint =
        new ServicePerEndpointImpl({{#inheritedFunctions}}{{dedupedFuncName}}{{/inheritedFunctions|, }})

{{/inheritedFunctions}}
      override def filtered(filter: _root_.com.twitter.finagle.Filter.TypeAgnostic): ServicePerEndpoint =
        new ServicePerEndpointImpl(
{{#inheritedFunctions}}
          {{dedupedFuncName}} = filter.toFilter.andThen({{dedupedFuncName}})
{{/inheritedFunctions|,}}
        )

{{#withAsClosable}}
      override def asClosable: _root_.com.twitter.util.Closable =
        _root_.com.twitter.util.Closable.all(
{{#inheritedFunctions}}
          this.{{dedupedFuncName}}
{{/inheritedFunctions|,}}
        )
{{/withAsClosable}}
    }
  }

  object ReqRepServicePerEndpoint {

    def apply(
{{#inheritedFunctions}}
      {{dedupedFuncName}} :  _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[{{ParentServiceName}}.{{funcObjectName}}.Args], _root_.com.twitter.scrooge.Response[{{ParentServiceName}}.{{funcObjectName}}.SuccessType]]
{{/inheritedFunctions|,}}
    ): ReqRepServicePerEndpoint =
      new ReqRepServicePerEndpointImpl({{#inheritedFunctions}}{{dedupedFuncName}}{{/inheritedFunctions|, }})

    private final class ReqRepServicePerEndpointImpl(
{{#inheritedFunctions}}
      override val {{dedupedFuncName}} : _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[{{ParentServiceName}}.{{funcObjectName}}.Args], _root_.com.twitter.scrooge.Response[{{ParentServiceName}}.{{funcObjectName}}.SuccessType]]
{{/inheritedFunctions|,}}
    ) extends ReqRepServicePerEndpoint {

{{#inheritedFunctions}}
      override def with{{withFuncName}}(
        {{dedupedFuncName}} : _root_.com.twitter.finagle.Service[com.twitter.scrooge.Request[{{ParentServiceName}}.{{funcObjectName}}.Args], _root_.com.twitter.scrooge.Response[{{ParentServiceName}}.{{funcObjectName}}.SuccessType]]
      ): ReqRepServicePerEndpoint =
        new ReqRepServicePerEndpointImpl({{#inheritedFunctions}}{{dedupedFuncName}}{{/inheritedFunctions|, }})
{{/inheritedFunctions}}

      override def filtered(filter: com.twitter.finagle.Filter.TypeAgnostic): ReqRepServicePerEndpoint =
        new ReqRepServicePerEndpointImpl(
{{#inheritedFunctions}}
          {{dedupedFuncName}} = filter.toFilter.andThen({{dedupedFuncName}})
{{/inheritedFunctions|,}}
        )

{{#withAsClosable}}
      override def asClosable: _root_.com.twitter.util.Closable =
        _root_.com.twitter.util.Closable.all(
{{#inheritedFunctions}}
          this.{{dedupedFuncName}}
{{/inheritedFunctions|,}}
        )
{{/withAsClosable}}
    }
  }

  def unsafeBuildFromMethods(methods: immutable$Map[ThriftMethod,  _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[_], _root_.com.twitter.scrooge.Response[_]]]): ReqRepServicePerEndpoint = {
{{#inheritedFunctions}}
    val {{dedupedFuncName}} = {
      val {{dedupedFuncName}}Opt = methods.get({{ParentServiceName}}.{{funcObjectName}})
      if ({{dedupedFuncName}}Opt.isEmpty) throw new IllegalArgumentException(_root_.java.lang.String.format("No implementation found for method {{funcObjectName}} in %s", methods.keySet))
      {{dedupedFuncName}}Opt.get.asInstanceOf[{{ParentServiceName}}.{{funcObjectName}}.ReqRepServicePerEndpointServiceType]
    }
{{/inheritedFunctions}}

    ReqRepServicePerEndpoint({{#inheritedFunctions}}{{dedupedFuncName}}{{/inheritedFunctions|, }})
  }

  @deprecated("Use ServicePerEndpoint", "2017-11-07")
  case class ServiceIface(
{{#inheritedFunctions}}
    {{dedupedFuncName}} : com.twitter.finagle.Service[{{ParentServiceName}}.{{funcObjectName}}.Args, {{ParentServiceName}}.{{funcObjectName}}.SuccessType]
{{/inheritedFunctions|,}}
  ) extends {{#parent}}{{parent}}.BaseServiceIface
    with {{/parent}}BaseServiceIface
    with _root_.com.twitter.finagle.thrift.service.Filterable[ServiceIface] {

    /**
     * Prepends the given type-agnostic `Filter` to all of the `Services`
     * and returns a copy of the `ServiceIface` now including the filter.
     */
    def filtered(filter: com.twitter.finagle.Filter.TypeAgnostic): ServiceIface =
      copy(
{{#inheritedFunctions}}
        {{dedupedFuncName}} = filter.toFilter.andThen({{dedupedFuncName}})
{{/inheritedFunctions|,}}
      )
  }

  implicit object ServicePerEndpointBuilder
    extends _root_.com.twitter.finagle.thrift.service.ServicePerEndpointBuilder[ServicePerEndpoint] {
      override def serviceClass: Class[ServicePerEndpoint] = classOf[ServicePerEndpoint]
      def servicePerEndpoint(
        thriftService: _root_.com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
        clientParam: RichClientParam
      ): ServicePerEndpoint =
        ServicePerEndpoint(
{{#inheritedFunctions}}
          {{dedupedFuncName}} = _root_.com.twitter.finagle.thrift.service.ThriftServicePerEndpoint(
            {{ParentServiceName}}.{{funcObjectName}},
            thriftService,
            clientParam
          )
{{/inheritedFunctions|,}}
        )
  }

  implicit object ReqRepServicePerEndpointBuilder
    extends _root_.com.twitter.finagle.thrift.service.ReqRepServicePerEndpointBuilder[ReqRepServicePerEndpoint] {
      override def serviceClass: Class[ReqRepServicePerEndpoint] = classOf[ReqRepServicePerEndpoint]
      def servicePerEndpoint(
        thriftService: _root_.com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
        clientParam: RichClientParam
      ): ReqRepServicePerEndpoint =
        ReqRepServicePerEndpoint(
{{#inheritedFunctions}}
          {{dedupedFuncName}} = _root_.com.twitter.finagle.thrift.service.ThriftReqRepServicePerEndpoint({{ParentServiceName}}.{{funcObjectName}}, thriftService, clientParam)
{{/inheritedFunctions|,}}
        )
  }

  @deprecated("Use ServicePerEndpointBuilder", "2017-11-07")
  implicit object ServiceIfaceBuilder
    extends com.twitter.finagle.thrift.ServiceIfaceBuilder[ServiceIface] {
      override def serviceClass: Class[ServiceIface] = classOf[ServiceIface]
      def newServiceIface(
        binaryService: com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
        clientParam: RichClientParam
      ): ServiceIface =
        ServiceIface(
{{#inheritedFunctions}}
          {{dedupedFuncName}} = _root_.com.twitter.finagle.thrift.service.ThriftServicePerEndpoint(
            {{ParentServiceName}}.{{funcObjectName}},
            binaryService,
            clientParam
          )
{{/inheritedFunctions|,}}
        )
  }
{{/generateServiceIface}}
{{^generateServiceIface}}
  // Skipped ServiceIface generation because this thrift service contains more than 254 methods.
  // see https://issues.scala-lang.org/browse/SI-7324
  def unsafeBuildFromMethods(methods: immutable$Map[ThriftMethod,  _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[_], _root_.com.twitter.scrooge.Response[_]]]): ReqRepServicePerEndpoint = ???
{{/generateServiceIface}}

{{/withFinagle}}
{{#thriftFunctions}}
  object {{funcObjectName}} extends ThriftMethod {
{{#functionArgsStruct}}
    {{>struct}}
{{/functionArgsStruct}}

    type SuccessType = {{typeName}}
{{#internalResultStruct}}
    {{>struct}}
{{/internalResultStruct}}

{{#annotations}}
    val annotations: immutable$Map[String, String] = immutable$Map(
{{#pairs}}
      "{{key}}" -> "{{value}}"
{{/pairs|,}}
    )
{{/annotations}}
{{^annotations}}
    val annotations: immutable$Map[String, String] = immutable$Map.empty
{{/annotations}}

{{#withFinagle}}
    type FunctionType = {{functionType}}
    type ReqRepFunctionType = {{reqRepFunctionType}}

    type ServicePerEndpointServiceType = _root_.com.twitter.finagle.Service[Args, SuccessType]
    type ReqRepServicePerEndpointServiceType = _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[Args], _root_.com.twitter.scrooge.Response[SuccessType]]

    def toServicePerEndpointService(f: FunctionType): ServicePerEndpointServiceType =
      _root_.com.twitter.finagle.Service.mk { args: Args =>
        f(args)
      }

    def toReqRepServicePerEndpointService(f: ReqRepFunctionType): ReqRepServicePerEndpointServiceType =
      _root_.com.twitter.finagle.Service.mk[_root_.com.twitter.scrooge.Request[Args], _root_.com.twitter.scrooge.Response[SuccessType]] { request: _root_.com.twitter.scrooge.Request[Args] =>
        f(request)
      }

{{/withFinagle}}
{{^withFinagle}}
    type FunctionType = Nothing
    type ReqRepFunctionType = Nothing
    type ServiceType = Nothing
    type ReqRepServiceType = Nothing
    type ServicePerEndpointServiceType = Nothing
    type ReqRepServicePerEndpointServiceType = Nothing

    def toServicePerEndpointService(f: FunctionType): ServicePerEndpointServiceType = ???
    def toReqRepServicePerEndpointService(f: ReqRepFunctionType): ReqRepServicePerEndpointServiceType = ???
{{/withFinagle}}

    val name: String = "{{originalFuncName}}"
    val serviceName: String = "{{ServiceName}}"
    val argsCodec: Args.type = Args
    val responseCodec: Result.type = Result
    val oneway: Boolean = {{is_oneway}}
  }

  // Compatibility aliases.
  val {{funcName}}$args: {{funcObjectName}}.Args.type = {{funcObjectName}}.Args
  type {{funcName}}$args = {{funcObjectName}}.Args

  val {{funcName}}$result: {{funcObjectName}}.Result.type = {{funcObjectName}}.Result
  type {{funcName}}$result = {{funcObjectName}}.Result

{{/thriftFunctions}}

{{#hasValidationAnnotation}}
  {{>serverValidationMixin}}
{{/hasValidationAnnotation}}

{{#withFinagle}}
  trait MethodPerEndpoint extends {{genericParent}} {
{{#asyncFunctions}}
    {{>function}}
{{/asyncFunctions}}
{{#withAsClosable}}
    /**
     * Used to close the underlying `Service`.
     * Not a user-defined API.
     */
    {{#parent}}override {{/parent}}def asClosable: _root_.com.twitter.util.Closable = _root_.com.twitter.util.Closable.nop
{{/withAsClosable}}
  }
{{#generateServiceIface}}

  object MethodPerEndpoint {

    def apply(servicePerEndpoint: ServicePerEndpoint): MethodPerEndpoint = {
      new MethodPerEndpointImpl(servicePerEndpoint) {}
    }

    /**
     * Use `MethodPerEndpoint.apply()` instead of this constructor.
     */
    class MethodPerEndpointImpl protected (servicePerEndpoint: ServicePerEndpoint)
      extends {{#methodPerEndpointParent}}{{methodPerEndpointParent}}.MethodPerEndpointImpl(servicePerEndpoint)
      with {{/methodPerEndpointParent}}MethodPerEndpoint {
{{#ownFunctions}}
        def {{funcName}}({{fieldParams}}): Future[{{typeName}}] =
          servicePerEndpoint.{{dedupedFuncName}}(self.{{funcObjectName}}.Args({{argNames}})){{^isVoid}}{{/isVoid}}{{#isVoid}}.unit{{/isVoid}}
{{/ownFunctions}}

{{#withAsClosable}}
        override def asClosable: _root_.com.twitter.util.Closable =
          servicePerEndpoint.asClosable
{{/withAsClosable}}
    }
  }

  object ReqRepMethodPerEndpoint {

    def apply(servicePerEndpoint: ReqRepServicePerEndpoint): MethodPerEndpoint =
      new ReqRepMethodPerEndpointImpl(servicePerEndpoint) { }

    /**
     * Use `ReqRepMethodPerEndpoint.apply()` instead of this constructor.
     */
    class ReqRepMethodPerEndpointImpl protected (servicePerEndpoint: ReqRepServicePerEndpoint)
      extends {{#parent}}{{parent}}.ReqRepMethodPerEndpoint.ReqRepMethodPerEndpointImpl(servicePerEndpoint)
      with {{/parent}}MethodPerEndpoint {

{{#ownFunctions}}
        def {{funcName}}({{fieldParams}}): Future[{{typeName}}] = {
          val requestCtx = _root_.com.twitter.finagle.context.Contexts.local.getOrElse(_root_.com.twitter.finagle.thrift.Headers.Request.Key, () => _root_.com.twitter.finagle.thrift.Headers.Request.newValues)
          val scroogeRequest = _root_.com.twitter.scrooge.Request(requestCtx.values, self.{{funcObjectName}}.Args({{argNames}}))
          servicePerEndpoint.{{dedupedFuncName}}(scroogeRequest).transform(_root_.com.twitter.finagle.thrift.service.ThriftReqRepServicePerEndpoint.transformResult){{^isVoid}}{{/isVoid}}{{#isVoid}}.unit{{/isVoid}}
        }
{{/ownFunctions}}

{{#withAsClosable}}
        override def asClosable: _root_.com.twitter.util.Closable =
          servicePerEndpoint.asClosable
{{/withAsClosable}}
    }
  }

  @deprecated("Use MethodPerEndpoint", "2017-11-07")
  class MethodIface(serviceIface: BaseServiceIface)
    extends {{#parent}}{{parent}}.MethodIface(serviceIface)
    with {{/parent}}MethodPerEndpoint {
{{#ownFunctions}}
    def {{funcName}}({{fieldParams}}): Future[{{typeName}}] =
      serviceIface.{{dedupedFuncName}}(self.{{funcObjectName}}.Args({{argNames}})){{^isVoid}}{{/isVoid}}{{#isVoid}}.unit{{/isVoid}}
{{/ownFunctions}}
  }

  implicit object MethodPerEndpointBuilder
    extends _root_.com.twitter.finagle.thrift.service.MethodPerEndpointBuilder[ServicePerEndpoint, MethodPerEndpoint] {
    def methodPerEndpoint(servicePerEndpoint: ServicePerEndpoint): MethodPerEndpoint =
      MethodPerEndpoint(servicePerEndpoint)
  }

  implicit object ReqRepMethodPerEndpointBuilder
    extends _root_.com.twitter.finagle.thrift.service.ReqRepMethodPerEndpointBuilder[ReqRepServicePerEndpoint, MethodPerEndpoint] {
    def methodPerEndpoint(servicePerEndpoint: ReqRepServicePerEndpoint): MethodPerEndpoint =
      ReqRepMethodPerEndpoint(servicePerEndpoint)
  }
{{/generateServiceIface}}

  class FinagledClient(
      service: com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
      clientParam: RichClientParam)
    extends {{ServiceName}}$FinagleClient(service, clientParam)
    with MethodPerEndpoint {

    @deprecated("Use com.twitter.finagle.thrift.RichClientParam", "2017-08-16")
    def this(
      service: com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
      protocolFactory: org.apache.thrift.protocol.TProtocolFactory = Protocols.binaryFactory(),
      serviceName: String = "{{ServiceName}}",
      stats: com.twitter.finagle.stats.StatsReceiver = com.twitter.finagle.stats.NullStatsReceiver,
      responseClassifier: ctfs.ResponseClassifier = ctfs.ResponseClassifier.Default
    ) = this(
      service,
      RichClientParam(
        protocolFactory,
        serviceName,
        clientStats = stats,
        responseClassifier = responseClassifier
      )
    )

    @deprecated("Use com.twitter.finagle.thrift.RichClientParam", "2017-08-16")
    def this(
      service: com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
      protocolFactory: org.apache.thrift.protocol.TProtocolFactory,
      serviceName: String,
      stats: com.twitter.finagle.stats.StatsReceiver
    ) = this(
      service,
      RichClientParam(
        protocolFactory,
        serviceName,
        clientStats = stats
      )
    )
  }

  class FinagledService(
      iface: MethodPerEndpoint{{#hasValidationAnnotation}} with ServerValidationMixin{{/hasValidationAnnotation}},
      serverParam: RichServerParam)
    extends {{ServiceName}}$FinagleService(iface, serverParam) {

    @deprecated("Use com.twitter.finagle.thrift.RichServerParam", "2017-08-16")
    def this(
      iface: MethodPerEndpoint{{#hasValidationAnnotation}} with ServerValidationMixin{{/hasValidationAnnotation}},
      protocolFactory: org.apache.thrift.protocol.TProtocolFactory,
      serviceName: String = "{{ServiceName}}"
    ) = this(iface, RichServerParam(protocolFactory, serviceName))
  }

  class Filter(serverParam: RichServerParam) {
    private[this] def protocolFactory: TProtocolFactory = serverParam.restrictedProtocolFactory

    private[this] def serviceName: String = serverParam.serviceName
    private[this] def responseClassifier: ctfs.ResponseClassifier = serverParam.responseClassifier
    private[this] def stats: StatsReceiver = serverParam.serverStats
    private[this] def perEndpointStats: Boolean = serverParam.perEndpointStats && !stats.isNull

    private[this] val tlReusableBuffer: TReusableBuffer = TReusableBuffer(
      initialSize = 512,
      maxThriftBufferSize = serverParam.maxThriftBufferSize,
      ctor = TByteArrayMemoryTransport.apply(_)
    )

    private[{{packageName}}] def exception(name: String, seqid: Int, code: Int, message: String): Buf = {
      val x = new TApplicationException(code, message)
      val memoryBuffer = tlReusableBuffer.take()
      try {
        val oprot = protocolFactory.getProtocol(memoryBuffer)

        oprot.writeMessageBegin(new TMessage(name, TMessageType.EXCEPTION, seqid))
        x.write(oprot)
        oprot.writeMessageEnd()
        oprot.getTransport.flush()

        // make a copy of the array of bytes to construct a new buffer because memoryBuffer is reusable
        Buf.ByteArray.Shared(memoryBuffer.getArray(), 0, memoryBuffer.length())
      } finally {
        tlReusableBuffer.reset()
      }
    }

{{#hasThriftFunctions}}
    private[this] def reply(name: String, seqid: Int, result: ThriftStruct): Buf = {
      val memoryBuffer = tlReusableBuffer.take()
      try {
        val oprot = protocolFactory.getProtocol(memoryBuffer)
        val start = System.nanoTime
        oprot.writeMessageBegin(new TMessage(name, TMessageType.REPLY, seqid))
        result.write(oprot)
        oprot.writeMessageEnd()
        val trace = _root_.com.twitter.finagle.tracing.Trace()
        if (trace.isActivelyTracing) {
          trace.recordBinary("srv/response_serialization_ns", System.nanoTime - start)
        }
        oprot.getTransport.flush()

        // make a copy of the array of bytes to construct a new buffer because memoryBuffer is reusable
        Buf.ByteArray.Shared(memoryBuffer.getArray(), 0, memoryBuffer.length())
      } finally {
        tlReusableBuffer.reset()
      }
    }
{{/hasThriftFunctions}}

    private[this] def recordResponse(reqRep: ctfs.ReqRep, methodStats: _root_.com.twitter.finagle.thrift.ThriftMethodStats): Unit = {
      ServerToReqRep.setCtx(reqRep)
      val classified = responseClassifier.applyOrElse(reqRep, ctfs.ResponseClassifier.Default)
      if (classified.isInstanceOf[ctfs.ResponseClass.Successful]) {
        methodStats.successCounter.incr()
      } else if (classified.isInstanceOf[ctfs.ResponseClass.Failed]) {
        methodStats.failuresCounter.incr()
        if (reqRep.response.isThrow) {
          methodStats.failuresScope.counter(Throwables.mkString(reqRep.response.throwable): _*).incr()
        }
      } // Last ResponseClass is Ignorable, which we do not need to record
    }

    final protected def perMethodStatsFilter(
      method: ThriftMethod
    ): finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[method.Args, method.Result]] = {
      val methodStats = if (perEndpointStats) {
        _root_.com.twitter.finagle.thrift.ThriftMethodStats((if (serviceName != "") stats.scope(serviceName) else stats).scope(method.name))
      } else {
        _root_.com.twitter.finagle.thrift.ThriftMethodStats.Null
      }

      new finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[method.Args, method.Result]] {
        def apply(
          req: (TProtocol, Int),
          service: finagle$Service[(TProtocol, Int), RichResponse[method.Args, method.Result]]
        ): Future[Array[Byte]] = {
          methodStats.requestsCounter.incr()
          service(req).transform { response =>
            if (response.isReturn) {
              val value = response.apply()
              if (value.isInstanceOf[SuccessfulResponse[method.Args, method.Result]]) {
                val succResp = value.asInstanceOf[SuccessfulResponse[method.Args, method.Result]]
                recordResponse(ctfs.ReqRep(succResp.input, _root_.com.twitter.util.Return(succResp.result.successField.get)), methodStats)
              } else if (value.isInstanceOf[ProtocolExceptionResponse[method.Args, method.Result]]) {
                val protExResp = value.asInstanceOf[ProtocolExceptionResponse[method.Args, method.Result]]
                recordResponse(ctfs.ReqRep(protExResp.input, _root_.com.twitter.util.Throw(protExResp.exception)), methodStats)
              } else if (value.isInstanceOf[ThriftExceptionResponse[method.Args, method.Result]]) {
                val thriftExResp = value.asInstanceOf[ThriftExceptionResponse[method.Args, method.Result]]
                val rep: Throwable = if (thriftExResp.ex.isInstanceOf[ThriftException]) {
                  _root_.com.twitter.finagle.SourcedException.setServiceName(thriftExResp.ex, serviceName)
                } else {
                  _root_.com.twitter.scrooge.internal.ApplicationExceptions.missingResult(serviceName)
                }
                recordResponse(ctfs.ReqRep(thriftExResp.input, _root_.com.twitter.util.Throw(rep)), methodStats)
              }
              Future.value(Buf.ByteArray.Owned.extract(value.response))
            } else { // Throw[_]
              recordResponse(ctfs.ReqRep(req, response), methodStats)
              Future.const(response.asInstanceOf[Throw[Array[Byte]]])
            }
          }
        }
      }
    }
    // ---- end boilerplate.

{{#methodFilters}}
    {{>methodFilter}}
{{/methodFilters}}
  }

{{/withFinagle}}
}

